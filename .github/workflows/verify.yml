
#   Verify GitHub Action
#   Copyright 2021 Jason Hambly
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

name: 'Verify GitHub Action'
on:
  pull_request:
    branches:
    - master
  workflow_dispatch:
  schedule:
  - cron: 0 23 * * *
jobs:


  # Obtain release and branch information relevant for testing

  obtain_releases:
    runs-on: ubuntu-latest
    outputs:
      release-list: ${{ steps.releases.outputs.release-list }}
      branch-list: ${{ steps.test-branches.outputs.branch-list }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Authenticate GitHub CLI
      run: echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
    - name: Obtain Quarkus release listing
      id: releases
      run: echo "::set-output name=release-list::[\"$(gh release list --repo quarkusio/quarkus --limit 10 | grep '.Final' | awk '{print $1}' | sort -V | tr '\n' ',' | sed s'/,$//' | sed s'/,/\",\"/g' )\"]"
    - name: Obtain test branch list
      id: test-branches
      run: echo "::set-output name=branch-list::[{release:\"$(git ls-remote | grep 'refs/heads/test-q' | grep -v 'Final-' | sed s'/^.*test-q//' | tr '\n' ',' | sed s'/^,//' | sed s'/,$//' | sed s'/,/\"\},\{release:\"/g')\"}]"


  # Create new test branches for new versions of Quarkus

  prepare_test_branches:
    needs: [obtain_releases]
    strategy:
      matrix:
        release: ${{ fromJSON(needs.obtain_releases.outputs.release-list) }}
        exclude: ${{ fromJSON(needs.obtain_releases.outputs.branch-list) }}
    runs-on: ubuntu-latest
    steps:
    - name: Print release
      if: ${{ matrix.release != '' }}
      run: echo ${{ matrix.release }}
    - name: Checkout repo
      if: ${{ matrix.release != '' }}
      uses: actions/checkout@v2
      with:
        path: test-copy
    - name: Create test project
      if: ${{ matrix.release != '' }}
      continue-on-error: true
      env:
        CURRENT_VERSION: ${{ matrix.release }}
      run: |
        mvn "io.quarkus:quarkus-maven-plugin:$CURRENT_VERSION:create" \
            -DprojectGroupId="org.example" \
            -DprojectArtifactId="test-project" \
            -Dextensions="io.quarkus:quarkus-rest-client-jaxb,io.quarkus:quarkus-smallrye-jwt"
        echo "CONTINUE=$?" >> $GITHUB_ENV  
    - name: Create an orphaned branch for testing
      if: ${{ matrix.release != '' && env.CONTINUE }}
      env:
        CURRENT_VERSION: ${{ matrix.release }}
      run: |
        cd test-copy
        git checkout --orphan "test-q$CURRENT_VERSION"
        git rm -rfq .
        cp -anv ../test-project/. ./
        git add -A
        git config --global user.email "noreply@github.com"
        git config --global user.name "automated"
        git commit -m "Used for testing of quarkus $CURRENT_VERSION"
        git push -u origin "test-q$CURRENT_VERSION"


  # Determine test cases based on selected versions, and available branches

  determine_test_cases:
    needs: [obtain_releases,prepare_test_branches]
    runs-on: ubuntu-latest
    outputs:
      release-list: ${{ steps.test-cases.outputs.list }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Obtain updated test branch list
      id: test-branches
      run: echo "::set-output name=branch-list::[\"$(git ls-remote | grep 'refs/heads/test-q' | grep -v 'Final-' | sed s'/^.*test-q//' | tr '\n' ',' | sed s'/^,//' | sed s'/,$//' | sed s'/,/\",\"/g')\"]"
    - name: Test cases
      id: test-cases
      env:
        RELEASES: ${{ needs.obtain_releases.outputs.release-list }}
        BRANCHES: ${{ steps.test-branches.outputs.branch-list }}
      run: |
        # wanted_releases = (releases - non-exitent) => wanted_releases = (releases - (releases-branches) )
        echo "::set-output name=list::$( echo $RELEASES | jq --compact-output --argjson releases $RELEASES --argjson branches $BRANCHES '.-($releases-$branches)' )"


  # Run update tests on a select number of test versions

  verify_update_action:
    needs: [determine_test_cases,branch_clean_up]
    strategy:
      max-parallel: 3
      matrix:
        release: ${{ fromJSON(needs.determine_test_cases.outputs.release-list) }}
    runs-on: ubuntu-latest
    steps:
    - name: Print release
      run: echo ${{ matrix.release }}
    - name: Checkout action repo
      uses: actions/checkout@v2
    - name: Checkout working repo
      uses: actions/checkout@v2
      with:
        ref: "test-q${{ matrix.release }}"
        path: working-copy
    - name: TEST LOCAL ACTION
      uses: ./
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        diagnostics: true
        checklist: |
          Migration Checklist:
         
          - [x] Reviewers and Assignees assigned
          - [x] Link to Migration Documentation provided
          - [ ] Migration Documentation reviewed
          - [ ] Changes reviewed against existing project
          - [ ] File modifications reviewed
          - [ ] Automated checks performed
          - [ ] Manual QA performed
    - name: Obtain Pull Request Branch
      run: echo "PR_BRANCH=$( gh pr list | grep test-q${{ matrix.release }} | grep OPEN | awk -F'\t' '{print $3}' )" >> $GITHUB_ENV
    - name: Verify checklist in Pull Request
      working-directory: working-copy
      run: |
        if [[ ! -z "$PR_BRANCH" ]]; then
          IFS='^'
          comments_array=($(gh pr view -c "$PR_BRANCH" | grep -A 100 '\-\-' | sed 's/--/\^/'))
          if [[ "${#comments_array[@]}" > 0 ]]; then # Comments exist
            echo -n ${comments_array[1]}
            echo -n ${comments_array[1]} | sha256sum | cut -c-64
            [[ "$(echo -n ${comments_array[1]} | sha256sum | cut -c-64)" == '1346d4a48d511b73dc09454e460fed0babcb79e0d93727eca13f942a132dcae2' ]]
          fi
        fi
    - name: Verify upgraded file system
      if: ${{ env.QUARKUS_VERSION != env.CURRENT_VERSION && ! env.BRANCH_EXISTS }} 
      continue-on-error: true
      working-directory: working-copy
      run: |
        if [[ -f ".update/$QUARKUS_VERSION.sha256" ]]; then
          EXPECTED_CHKSUM=$(sha256sum ".update/$QUARKUS_VERSION.sha256" | cut -c-64)
          UPDATED_CHKSUM=$(find . -type f | xargs sha256sum | sort | grep -v './.git/\|./.update/' | sha256sum | cut -c-64)
          if [[ "$EXPECTED_CHKSUM" != "$UPDATED_CHKSUM" ]]; then
            echo "::error::$(echo 'Post update checksums do not match'; sha256sum -c ".update/$QUARKUS_VERSION.sha256" | grep 'FAILED')"
            echo "::group::Failed items"
            echo "$(sha256sum -c .update/$QUARKUS_VERSION.sha256 | grep 'FAILED')"
            echo "::endgroup::"
            exit 1
          fi
        fi
    - name: Upload checksum artifacts
      uses: actions/upload-artifact@v2
      with:
        name: "${{ matrix.release }}-checksums"
        path: "${{ github.workspace }}/working-copy/.update/"
        retention-days: 1
    - name: Clean up - delete pull request and branch
      working-directory: working-copy
      run: |
        if [[ ! -z "$PR_BRANCH" ]]; then
          git switch "test-q${{ matrix.release }}" # Switch before deletion
          gh pr close "$PR_BRANCH" --delete-branch
        fi


  # Clean up any remaining test Pull Requests and Branches

  branch_clean_up:
    needs: [obtain_releases]
    runs-on: ubuntu-latest
    steps:
    - name: TODO
      run: echo TODO


  # Verify that the POM information is been collected as expected
  # Verify that no issues exist not having a checklist
  # Verify a complex extension list

  verify_pom_information:
    needs: [prepare_test_branches,branch_clean_up]
    strategy:
      matrix:
        release: ['1.10.5.Final']
    runs-on: ubuntu-latest
    steps:
    - name: Print release
      run: echo ${{ matrix.release }}
    - name: Checkout action repo
      uses: actions/checkout@v2
    - name: Checkout working repo
      uses: actions/checkout@v2
      with:
        ref: "test-q${{ matrix.release }}"
        path: working-copy
    - name: Modify Quarkus extenstions
      working-directory: working-copy
      run: |
        mvn --quiet quarkus:add-extension -Dextensions="\
            io.quarkus:quarkus-flyway,\
            io.quarkus:quarkus-cache,\
            io.quarkus:quarkus-infinispan-client,\
            io.quarkus:quarkus-logging-json,\
            io.quarkus:quarkus-oidc,\
            io.quarkus:quarkus-resteasy-jsonb,\
            io.quarkus:quarkus-resteasy-mutiny,\
            io.quarkus:quarkus-resteasy-qute,\
            io.quarkus:quarkus-smallrye-health"
    - name: TEST LOCAL ACTION
      uses: ./
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        diagnostics: true
    - name: Verify no checklist in Pull Request
      working-directory: working-copy
      run: |
        if [[ ! -z "$PR_BRANCH" ]]; then
          IFS='^'
          comments_array=($(gh pr view -c "$PR_BRANCH" | grep -A 100 '\-\-' | sed 's/--/\^/'))
          [[ "${#comments_array[@]}" == 0 ]];
        fi
    - name: verify expected values
      run: |
        [[ 
          "$CURRENT_VERSION" == "${{ matrix.release }}" && 
          "$PROJECT_GROUP" == "org.example" &&
          "$PROJECT_NAME" == "test-project" &&
          $(echo -n "$QUARKUS_EXT" | sha256sum | cut -c-64) == "58e6630e93eeb62d31e89c86c11c5e63f5394e037603b615979d2849b07b088b"
        ]]
    - name: Clean up - delete pull request and branch
      working-directory: working-copy
      run: |
        PR_BRANCH=$( gh pr list | grep "test-q${{ matrix.release }}" | grep OPEN | awk -F'\t' '{print $3}' )
        if [[ ! -z "$PR_BRANCH" ]]; then
          git switch "test-q${{ matrix.release }}" # Switch before deletion
          gh pr close "$PR_BRANCH" --delete-branch
        fi


  # Completion and upload checksums

  verify_complete:
    needs: [verify_update_action,verify_pom_information]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout action repo
      uses: actions/checkout@v2
      with:
        path: working-copy
    - name: Switch to source branch
      if: ${{ github.event_name == 'pull_request' }}
      working-directory: working-copy
      run: |
        git fetch --all --quiet
        git switch "${{ github.head_ref }}"
    - name: Download checksum artifacts
      uses: actions/download-artifact@v2
      with: 
        path: checksums
    - name: Ensure update directory exists
      working-directory: working-copy
      run: mkdir -p .update
    - name: Copy into repo
      continue-on-error: true
      working-directory: checksums
      run: find . -type f -exec cp -u {} "$GITHUB_WORKSPACE/working-copy/.update/" \;
    - name: Combine all checksums
      working-directory: 'working-copy/.update'
      run: |
        cat *.sha256 | sort | uniq > checksums_combined
        cat checksums_combined | awk '{print $2}' | sort | uniq > filenames_combined
    - name: Add files to repository
      working-directory: working-copy
      run: |
        if [[ $(git status --short | wc -l) != 0 ]]; then
          git status --short
          git config --global user.email "noreply@github.com"
          git config --global user.name "automated"
          git add --all .update/
          git commit -m "Updated checksums"
          echo "CHECKSUM_UPDATE=true" >> $GITHUB_ENV
        fi
    - name: Push repository changes upstream
      if: ${{ env.CHECKSUM_UPDATE }}
      working-directory: working-copy
      run: git push